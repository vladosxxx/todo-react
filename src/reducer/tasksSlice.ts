import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit'
import { RootState, AppThunk } from '../store/store'
import { getTasks } from '../api/getTasks'
import { addTask } from '../api/addTask'
import { delTask } from '../api/delTask'

interface taskObj {
  id: number
  task: string
  favorite: boolean
  done: boolean
}
export interface TasksState {
  tasks: Array<taskObj>
  isLoading: boolean
}

const initialState: TasksState = {
  tasks: [],
  isLoading: false,
}

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const getAllTaskAsync = createAsyncThunk('tasks/getTasks', async () => {
  const res = await getTasks()
  return res
  // The value we return becomes the `fulfilled` action payload
})
export const addTaskAsync = createAsyncThunk(
  'task/addTask',
  async (task: taskObj) => {
    const res = await addTask(task)
    return res
  }
)
export const delTaskAsync = createAsyncThunk(
  'task/delTask',
  async (id: number) => {
    const res = await delTask(id)
    console.log(res)
    return res
  }
)

export const tasksSlice = createSlice({
  name: 'tasks',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    // getAllTasks: (state) => {
    //   // Redux Toolkit allows us to write "mutating" logic in reducers. It
    //   // doesn't actually mutate the state because it uses the Immer library,
    //   // which detects changes to a "draft state" and produces a brand new
    //   // immutable state based off those changes
    //   return state
    // },
    // addTask: (state) => {
    //   state.tasks -= 1
    // },
    // // Use the PayloadAction type to declare the contents of `action.payload`
    // incrementByAmount: (state, action: PayloadAction<number>) => {
    //   state.value += action.payload
    // },
  },
  extraReducers: (builder) => {
    builder
      .addCase(getAllTaskAsync.pending, (state) => {
        state.isLoading = true
      })
      .addCase(getAllTaskAsync.fulfilled, (state, action) => {
        state.isLoading = false
        state.tasks = action.payload
      })
      .addCase(addTaskAsync.pending, (state) => {
        state.isLoading = true
      })
      .addCase(addTaskAsync.fulfilled, (state, action) => {
        return {
          isLoading: false,
          tasks: [...state.tasks, action.payload],
        }
      })
      .addCase(delTaskAsync.pending, (state) => {
        state.isLoading = true
      })
      .addCase(delTaskAsync.fulfilled, (state, action) => {
        console.log('action', action.payload)
        return {
          isLoading: false,
          tasks: state.tasks.filter((item) => item.id !== action.payload),
        }
      })
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
})

// export const { getAllTasks } = tasksSlice.actions
// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectTasks = (state: RootState) => state.tasks
// export const selectTasksAsync = (): AppThunk => (dispatch, getState) => {
//   selectTasks(getState())
// }
// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.

export default tasksSlice.reducer
